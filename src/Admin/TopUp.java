package Admin;

import java.awt.Color;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Kevin
 */
public class TopUp extends javax.swing.JFrame {

    private final DefaultTableModel model = new DefaultTableModel();

    /**
     * Creates new form Receipt
     */
    public TopUp(String username) {
        initComponents();
        this.username.setText(username);
        setLocationRelativeTo(null);
        setResizable(false);
        setVisible(true);
        getContentPane().setBackground(Color.WHITE);
        setTitle("Admin Menu");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        topup = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        username = new javax.swing.JLabel();
        customer = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Customer Name: ");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Amount to Top Up: ");

        jTextField2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        topup.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        topup.setText("Top-Up");
        topup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topupActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setText("Customer Credit Top-Up");

        backButton.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        backButton.setText("< Back");
        backButton.setBorder(null);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        username.setText("jLabel4");

        customer.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(username))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(customer, 0, 229, Short.MAX_VALUE)
                            .addComponent(jTextField2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(233, 233, 233)
                        .addComponent(topup)))
                .addGap(0, 100, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jLabel3)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(customer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(topup)
                .addGap(35, 35, 35)
                .addComponent(username))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void topupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topupActionPerformed
        try {
            handleTopUp();
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_topupActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        AdminMenu adminMenu = new AdminMenu(username.getText());
        adminMenu.setVisible(true); // Show the other JFrame
        this.dispose(); // Close the current JFrame
    }//GEN-LAST:event_backButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        File f = new File("customer.dat");
        try (
                FileInputStream fis = new FileInputStream(f); BufferedInputStream bis = new BufferedInputStream(fis); DataInputStream dis = new DataInputStream(bis);) {
            String firstline = dis.readUTF();
            try {
                while (dis.available() > 0) {
                    String cid = dis.readUTF();
                    String cpw = dis.readUTF();
                    String cname = dis.readUTF();
                    String cpn = dis.readUTF();
                    String credit = dis.readUTF();
                    if (!contains(customer, cname)) {
                        customer.addItem(cname);
                    }
                }
            } catch (EOFException e) {
            }
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_formWindowOpened

    private boolean contains(JComboBox comboBox, String item) {
        for (int i = 0; i < comboBox.getItemCount(); i++) {
            if (item.equals(comboBox.getItemAt(i).toString())) {
                return true;
            }
        }
        return false;
    }

    // all good
    public void handleTopUp() throws IOException {
        String customerId = customer.getSelectedItem().toString(); // Replace with your actual text field variable
        String topUpAmountStr = jTextField2.getText(); // Replace with your actual text field variable

        // Basic validation
        if (customerId.isEmpty() || topUpAmountStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter all fields", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            double topUpAmount = Double.parseDouble(topUpAmountStr);
            if (topUpAmount <= 0) {
                JOptionPane.showMessageDialog(this, "Please enter a valid amount", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Process the top-up
            processTopUp(customerId, topUpAmount);

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid amount format", "Error", JOptionPane.ERROR_MESSAGE);
        }

        clearTextField();
    }

    // dat done
    public void processTopUp(String customerId, double amount) throws FileNotFoundException, IOException {
        File file = new File("customer.dat");
        ArrayList<String> customers = new ArrayList<>();

        // Read all customers
        try (FileInputStream fis = new FileInputStream(file); BufferedInputStream bis = new BufferedInputStream(fis); DataInputStream dis = new DataInputStream(bis);) {
            String firstline = dis.readUTF();
            customers.add(firstline);
            while (dis.available() > 0) {
                String cid = dis.readUTF();
                String cpw = dis.readUTF();
                String cname = dis.readUTF();
                String cphone = dis.readUTF();
                double revenue = Double.parseDouble(dis.readUTF());
                Customer cus = new Customer(cid, cname, cphone, cpw, revenue);
                if (cus.getName().equals(customerId)) {
                    cus.creditTopUp(amount);
                    customers.add(cid);
                    customers.add(cpw);
                    customers.add(cname);
                    customers.add(cphone);
                    customers.add(String.valueOf(cus.getCredit()));
                } else {
                    customers.add(cid);
                    customers.add(cpw);
                    customers.add(cname);
                    customers.add(cphone);
                    customers.add(String.valueOf(revenue));
                }
            }
            try {
                FileOutputStream fos = new FileOutputStream("customer.dat");
                BufferedOutputStream bos = new BufferedOutputStream(fos);
                DataOutputStream dos = new DataOutputStream(bos);
                for (String str : customers) {
                    dos.writeUTF(str);
                }
                dos.close();
                bos.close();
                fos.close();
            } catch (IOException e) {

            }
            JOptionPane.showMessageDialog(this, "Credit topped up successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
        }

        Receipt receipt = new Receipt(customerId, amount);
//          displayReceipt(receipt); // Display the receipt

//          String receiptHeader = "-------------------------- Receipt --------------------------";
//          String date =          "Date/Time: " + receipt.getTimestamp().toString();
//          String customerId      "
        LocalDateTime currentDateTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String formattedDateTime = currentDateTime.format(formatter);
        String creditAmount = "Your account has been credited with RM" + amount + "0 at ";

        // After displaying the receipt, show the non-blocking notification
//          NonBlockingNotification.showNotification(receiptHeader, date, customerId, creditAmount);
        NonBlockingNotification.logNotification(customerId, creditAmount); // Store the notification
        try (FileOutputStream fos2 = new FileOutputStream("ctransaction.dat", true); BufferedOutputStream bos2 = new BufferedOutputStream(fos2); DataOutputStream dos2 = new DataOutputStream(bos2)) {
            dos2.writeUTF(customerId);
            dos2.writeUTF("+" + amount);
            dos2.writeUTF(formattedDateTime);
        }
        // Store the receipt if it's not null
        if (receipt != null) {
            storeReceipt(receipt);
        } else {
            // Handle the case where the customer is not found
            JOptionPane.showMessageDialog(this, "Customer not found", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void clearTextField() {
        jTextField2.setText("");
    }

    // dat done
    public void storeReceipt(Receipt receipt) {
        String filename = "receipts.dat"; // Change to a .dat file

        try (FileOutputStream fos = new FileOutputStream(filename, true); ObjectOutputStream oos = new AppendableObjectOutputStream(fos)) { // Custom ObjectOutputStream to append

            oos.writeObject(receipt); // Write the receipt object

        } catch (IOException e) {
            System.err.println("An error occurred while writing to the receipt file: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error writing receipt to file.", "File Write Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> customer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton topup;
    private javax.swing.JLabel username;
    // End of variables declaration//GEN-END:variables
}
